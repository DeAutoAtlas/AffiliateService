// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  CLICK
  LEAD
}

enum InvoiceStatus {
  UPCOMING
  PAID
  CANCELED
  OPEN
}

model Publisher {
  id                 String            @id @default(cuid())
  email              String            @unique
  firstName          String
  lastName           String
  kvkNumber          String
  phoneNumber        String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  campaigns          Campaign[]
  TwoFactorTokens    TwoFactorTokens[]
  hashedRefreshToken String?
  invoices           Invoice[]
}

model TwoFactorTokens {
  id        String    @id @default(cuid())
  token     String    @unique
  user      Publisher @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Campaign {
  id               String           @id @default(cuid())
  affiliateCode    String
  publisher        Publisher        @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  publisherId      String
  campaignActions  CampaignAction[]
  invoiceLineItems InvoiceLine[]
}

model CampaignAction {
  id         String     @id @default(cuid())
  campaign   Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  firedAt    DateTime   @default(now())
  action     ActionType
}

model Platform {
  id        String   @id @default(cuid())
  name      String   @unique
  baseUrl   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceLines InvoiceLine[]
  publisher    Publisher     @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  publisherId  String
  status       InvoiceStatus @default(UPCOMING)
}

model InvoiceLine {
  id         String   @id @default(cuid())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId  String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int // amount of leads
  total      Int // total amount of money
}
